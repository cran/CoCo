
;(trace call-coco)
;(trace :read-model)
;(trace :set-read)
;(trace :set-ordinal)

(def x (make-coco :n 1053696))

;(send x :set-switch 'debug 'on)

(send x :enter-names "ABCDEF" '(2 2 2 2 2 2) '(0 0 0 0 0 0))

(send x :enter-names (list "A" "C" "B" "D" "E" "F") '(2 2 2 2 2 2)
      '(0 0 0 0 0 0))

(send x :enter-names (list "A" "C" "B" "D" "E" "F") '(2 2 2 2 2 2) '(1 1 1))

(send x :enter-names (list "A" "C" "B" "D" "E" "F") '(2 2 2 2 2))

(send x :enter-names (list "A" "C" "B" "D" "E" "F") '(2 2 2 2 2) '(1 1 1))

(send x :enter-names (list "A" "C" "B" "D" "E" "F") '(2 2 2 2 2 2))

(send x :enter-names (list ":A001" ":C002" ":B003" ":D004" ":XXXX" ":F006")
      '(1 3 5 7 9 13) '(2 4 6 6 4 0))

(send x :enter-names
      (list ":A001" ":C002" ":B003" ":D004" ":XXXX" ":F006" ":G007")
      '(1 3 5 7 9 13 1) '(2 4 6 6 4 0 2))

(send x :enter-list '(1 3 5 7 9 13 1))
(print (send x :read-model ":B003:F006:XXXX"))
(print (send x :read-model ":B003:F006:XXXX;"))
(print (send x :read-model ":B003:F006:XXXX:A001"))
(print (send x :read-model ":B003:F006:XXXX:A001;"))
(print (send x :print-model 'all))

(print (send x :set-datastructure 'what))
(print (send x :set-datastructure 'all))
(print (send x :set-datastructure 'what))
(print (send x :set-datastructure 'necessary))
(print (send x :set-datastructure 'what))
(print (send x :set-datastructure 'file))
(print (send x :set-datastructure 'what))
(print (send x :set-switch 'large 'on))
(print (send x :set-datastructure 'what))
(print (send x :set-datastructure 'large))
(print (send x :set-datastructure 'what))
(print (send x :set-switch 'large 'what))
(print (send x :set-switch 'large 'off))
(print (send x :set-datastructure 'what))

(send x :status 'specification)
(print (send x :set-ordinal ":B003:F006:XXXX:F006"))
(print (send x :set-ordinal ":B003:F006:XXXX:F006;"))
(send x :status 'specification)

(print (send x :dimension :full nil))
(print (send x :dimension :full T))
(print (send x :return-marginal-dimension "*" :full nil))
(print (send x :return-marginal-dimension "*" :full T))
(print (send x :return-factor-type-list :full nil))
(print (send x :return-factor-type-list :full T))
(print (send x :return-level-list :full nil))
(print (send x :return-level-list :full T))
(print (send x :return-missing-list :full nil))
(print (send x :return-missing-list :full T))
(print (send x :return-name-list-string :full nil))
(print (send x :return-name-list-string :full T))
(print (send x :return-name-list :full nil))
(print (send x :return-name-list :full T))
(print (send x :return-names :full nil))
(print (send x :return-names :full T))

(print (send x :set-read 'subset ":C002:B003:D004:XXXX"))
(print (send x :set-read 'subset ":C002:B003:D004:XXXX;"))
(send x :status 'specification)
(print (send x :set-ordinal ":B003:XXXX"))
(print (send x :set-ordinal ":B003:XXXX;"))
(send x :status 'specification)

(print (send x :dimension :full nil))
(print (send x :dimension :full T))
(print (send x :return-marginal-dimension "*" :full nil))
(print (send x :return-marginal-dimension "*" :full T))
(print (send x :return-factor-type-list :full nil))
(print (send x :return-factor-type-list :full T))
(print (send x :return-level-list :full nil))
(print (send x :return-level-list :full T))
(print (send x :return-missing-list :full nil))
(print (send x :return-missing-list :full T))
(print (send x :return-name-list-string :full nil))
(print (send x :return-name-list-string :full T))
(print (send x :return-name-list :full nil))
(print (send x :return-name-list :full T))
(print (send x :return-names :full nil))
(print (send x :return-names :full T))

(print (send x :set-read 'all))
(send x :status 'specification)
(print (send x :set-ordinal ":B003:XXXX"))
(print (send x :set-ordinal ":B003:XXXX;"))
(send x :status 'specification)

(print (send x :dimension :full nil))
(print (send x :dimension :full T))
(print (send x :return-marginal-dimension "*" :full nil))
(print (send x :return-marginal-dimension "*" :full T))
(print (send x :return-factor-type-list :full nil))
(print (send x :return-factor-type-list :full T))
(print (send x :return-level-list :full nil))
(print (send x :return-level-list :full T))
(print (send x :return-missing-list :full nil))
(print (send x :return-missing-list :full T))
(print (send x :return-name-list-string :full nil))
(print (send x :return-name-list-string :full T))
(print (send x :return-name-list :full nil))
(print (send x :return-name-list :full T))
(print (send x :return-names :full nil))
(print (send x :return-names :full T))
