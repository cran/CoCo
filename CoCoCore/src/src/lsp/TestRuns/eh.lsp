
(load "tstinit")

;;; (trace call-coco)

(print (send x :eh ))

;;; (send x :set-switch 'debug 'on)

;;; (print (send x :accept 'what))
;;; (print (send x :reject 'what))

;;; (print (send x :eh :strategy 'smallest    :sub-class nil))
;;; (print (send x :eh :strategy 'alternating :sub-class nil))
;;; (print (send x :eh :strategy 'rough       :sub-class nil))
;;; (print (send x :eh :strategy 'rough       :sub-class 'decomposable))
;;; (print (send x :eh :strategy 'rough       :sub-class 'graphical))
;;; (print (send x :eh :strategy 'rough       :sub-class 'hierarchical))

(print (send x :set-main-effects "*"))
(print (send x :set-main-effects 'what))
(print (send x :set-main-effects "BCDE"))
(print (send x :set-main-effects 'what))
(print (send x :set-main-effects ))

(print (send x :read-base-model "*"))
(print (send x :read-base-model 'what))
(print (send x :read-base-model ))

(print (send x :search-base ))

(print (send x :fix-in "ABC"))
(print (send x :fix-in 'what))
(print (send x :fix-in ))
(print (send x :fix-out "ABC"))
(print (send x :fix-out 'what))
(print (send x :fix-out ))
(print (send x :add-fix-in "ABC"))
(print (send x :add-fix-in 'what))
(print (send x :add-fix-in ))
(print (send x :add-fix-out "ABC"))
(print (send x :add-fix-out 'what))
(print (send x :add-fix-out ))
(print (send x :redo-fix-in ))
;;; (print (send x :redo-fix-in 'what))
(print (send x :redo-fix-out ))
;;; (print (send x :redo-fix-out 'what))

(print (send x :set-search 'smallest))
(print (send x :set-search 'alternating))
(print (send x :set-search 'rough))
(print (send x :set-search 'graphical))
(print (send x :set-search 'hierarchical))
;;; (print (send x :set-search 'decomposable))

(print (send x :set-graphical-search 'flop))
(print (send x :set-graphical-search 'what))
(print (send x :set-graphical-search ))
(print (send x :set-graphical-search 'on))
(print (send x :set-graphical-search 'off))
(print (send x :set-graphical-search ))

(print (send x :extract 'accepted    nil))
(print (send x :extract 'rejected    'decomposable))
(print (send x :extract 'a-dual      'graphical))
(print (send x :extract 'r-dual      'hierarchical))

(print (send x :find-dual 'a-dual    nil))
(print (send x :find-dual 'a-dual    'decomposable))
(print (send x :find-dual 'a-dual    'graphical))
(print (send x :find-dual 'a-dual    'hierarchical))
				    
(print (send x :find-dual 'r-dual    nil))
(print (send x :find-dual 'r-dual    'decomposable))
(print (send x :find-dual 'r-dual    'graphical))
(print (send x :find-dual 'r-dual    'hierarchical))
				    
(print (send x :find-dual 'both      nil))
(print (send x :find-dual 'both      'decomposable))
(print (send x :find-dual 'both      'graphical))
(print (send x :find-dual 'both      'hierarchical))

;;; (print (send x :to-search-interval ))
;;; (print (send x :to-search-models ))
;;; (print (send x :to-search ))
;;; (print (send x :add-dual-to-class ))
;;; (print (send x :fit-EH ))

(print (send x :dispose-of-eh 'a-duals))
(print (send x :dispose-of-eh 'r-duals))
(print (send x :dispose-of-eh 'duals))
(print (send x :dispose-of-eh 'accepted))
(print (send x :dispose-of-eh 'rejected))
(print (send x :dispose-of-eh 'classes))
(print (send x :dispose-of-eh 'all))

(print (send x :accept "*"))
(print (send x :accept 'what))
(print (send x :reject "."))
(print (send x :reject 'what))

(print (send x :fit "ACE,ADE,BC,F; [[AC][ADE][BC][BE][F]"))
(print (send x :fit "ACE,ADE,BC,F. [[AC][ADE][BC][BE][F]"))
(print (send x :fit "[[A]] [[B]] [[C]] [[D]] [[E]] [[F]]"))
(print (send x :fit "A. B. C. D. E. F."))

(print (send x :fit "[[AC][ADE][BC][BE][F]] [[ACE][ADE][BC][F]]"))
(print (send x :fit 'a-dual))
(print (send x :fit 'r-dual))
(print (send x :fit 'base ))
(print (send x :fit 'current ))
(print (send x :fit 'last ))
(print (send x :fit 'number 8 ))
(print (send x :fit 7 ))
(print (send x :fit 'interval 1 6 ))
(print (send x :fit 'list (list  10 11) ))
(print (send x :fit (list 9 12) ))
