import(methods)

# Variables missing:
# '.coco.identifications' '.current.coco' '.ended.coco' 
# '.instances.coco' '.instances.coco.models'
# Functions missing:
#  '.enter.double.list' '.is.nil.model' '.my.trace' 
#  '.names.from.model' '.set.datastructure' '.split.name.set'
#  'coco.init' 'emOn' 'endCoCo'
#  'enterDataFrame' 'enterList' 'enterModel' 'enterNames'
#  'enterQlist' 'enterQtable' 'enterTable' 'enterTwoLists'
#  'excludeMissing' 'importCoCo' 'is.number'
#  'make.coco' 'make.cococg' 'make.model'
#  'my.assign' 'returnModelNumber' 'setOrdinal' 'setUseVariables'
#  'Warning'

export(# CoCoObjects:
       # ".First.lib.CoCoObjects",
       "currentCoCo",  "makeCurrentCoCo", 
           ".new.coco", ".new.coco.model", ".SetSlotValue", 
           ".set.coco.value", ".clear.coco.objects", "clearCoCoObjects",
           ".object.of.thing",  ".object.of.model", 
           ".recover", ".recover.model", ".recover.reference",
           ".return.reference",  ".return.type",
           ".return.object.model.number", ".end.temporary.object",

#        "label", "width",
#        "testEdge", "subModifyModel", "modifyModel", "dynamic.Graph",
#        "setGraphComponents", "graphComponents",


       ".CoCo.newenv", ".CoCo.toplevel", ".is.CoCo.env", ".visit.envs",
       ".get.env.CoCoOBJECT", ".get.env.CoCoModelOBJECT",
       ".get.env.CoCoVIEWS", ".CoCo.Root", 

       "makeModel",
       "recover.coco.model")

exportClasses("CoCoIdClass", "CoCoClass", "CoCoModelClass")

# exportClasses("CoCoIdClass", "CoCoClass", "CoCoModelClass", "CoCoTestClass")
# exportMethods("label", "width",
#               "testEdge", "subModifyModel", "modifyModel", "dynamic.Graph",
#               "setGraphComponents", "graphComponents" # , "vertexEdges"
#               )
